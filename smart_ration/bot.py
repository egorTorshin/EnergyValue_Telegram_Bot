import os
import json
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from product_categories import (
    get_category_keyboard, get_products_in_category, 
    get_all_product_names, get_product_info
)
# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLAlchemy
from database_service import db_service
from data_adapter import UserProfile as AdapterUserProfile, sql_user_to_user_profile

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot_token = os.getenv('BOT_TOKEN')
if not bot_token:
    raise ValueError("BOT_TOKEN not found in environment variables")
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_activity = State()
    waiting_for_goal = State()
    waiting_for_category = State()
    waiting_for_product_selection = State()
    waiting_for_product_weight = State()

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
class Gender(Enum):
    MALE = "male"
    FEMALE = "female"

class Activity(Enum):
    SEDENTARY = 1.2
    LIGHT = 1.375
    MODERATE = 1.55
    ACTIVE = 1.725
    VERY_ACTIVE = 1.9

class Goal(Enum):
    WEIGHT_LOSS = "weight_loss"
    BALANCE = "balance"
    WEIGHT_GAIN = "weight_gain"

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
@dataclass
class UserProfile:
    user_id: int
    gender: Gender
    age: int
    weight: float
    height: float
    activity: Activity
    goal: Goal
    daily_calories: int = 0
    protein: float = 0
    fat: float = 0
    carbs: float = 0
    meals_count: int = 4

@dataclass
class Product:
    name: str
    calories: float
    protein: float
    fat: float
    carbs: float

@dataclass
class MealPlan:
    breakfast: List[Tuple[str, float]]
    snack: List[Tuple[str, float]]
    lunch: List[Tuple[str, float]]
    dinner: List[Tuple[str, float]]
    second_snack: Optional[List[Tuple[str, float]]] = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL)
# –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–µ—à –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
users: Dict[int, UserProfile] = {}
user_products: Dict[int, List[Tuple[str, float]]] = {}

async def clear_user_products(user_id: int) -> None:
    """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è"""
    await db_service.clear_user_products(user_id)
    if user_id in user_products:
        user_products[user_id] = []

async def add_product_to_user(user_id: int, product_name: str, weight: float) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–±—ä–µ–¥–∏–Ω—è—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
    await db_service.add_user_product(user_id, product_name, weight)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
    if user_id not in user_products:
        user_products[user_id] = []
    
    # –ò—â–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–µ—à–µ
    for i, (name, existing_weight) in enumerate(user_products[user_id]):
        if name.lower() == product_name.lower():
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å–∞
            user_products[user_id][i] = (name, existing_weight + weight)
            return
    
    # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    user_products[user_id].append((product_name.lower(), weight))

def get_user_products_summary(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_products or not user_products[user_id]:
        return "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    
    products = user_products.get(user_id, [])
    total_calories = calculate_total_calories(products)
    
    summary = f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ ({len(products)} —à—Ç.):\n\n"
    
    for product_name, weight in products:
        db_product_name = find_similar_product(product_name)
        if db_product_name:
            product = PRODUCTS_DB[db_product_name]
            calories = product.calories * weight / 100
            summary += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –ø—Ä–∏–º–µ—Ä–Ω–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é
            calories = 100 * weight / 100
            summary += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
    
    summary += f"\nüìä –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {total_calories:.1f}"
    
    if user_id in users:
        user = users[user_id]
        summary += f" / {user.daily_calories} –∫–∫–∞–ª"
        
        if total_calories > user.daily_calories + 200:
            summary += "\n‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞–ª–æ—Ä–∏–π! –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
        elif total_calories < user.daily_calories - 100:
            summary += "\n‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ª–æ—Ä–∏–π! –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è."
    
    return summary

async def remove_product_from_user(user_id: int, product_name: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_success = await db_service.remove_user_product(user_id, product_name)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
    if user_id not in user_products:
        return db_success
    
    products = user_products[user_id]
    for i, (name, weight) in enumerate(products):
        if name.lower() == product_name.lower():
            del products[i]
            break
    
    return db_success

async def load_user_from_db(user_id: int) -> Optional[UserProfile]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à"""
    sql_user = await db_service.get_user(user_id)
    adapter_user = sql_user_to_user_profile(sql_user)
    if not adapter_user:
        return None
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ Enum'—ã
    try:
        local_user = UserProfile(
            user_id=adapter_user.user_id,
            gender=Gender(adapter_user.gender.value),
            age=adapter_user.age,
            weight=adapter_user.weight,
            height=adapter_user.height,
            activity=Activity(adapter_user.activity.value),
            goal=Goal(adapter_user.goal.value),
            daily_calories=adapter_user.daily_calories,
            protein=adapter_user.protein,
            fat=adapter_user.fat,
            carbs=adapter_user.carbs,
            meals_count=adapter_user.meals_count,
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –ë–î: {e}")
        return None
    users[user_id] = local_user
    return local_user

async def load_user_products_from_db(user_id: int) -> List[Tuple[str, float]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à"""
    products = await db_service.get_user_products(user_id)
    user_products[user_id] = products
    return products

async def save_user_to_db(user: UserProfile) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∫–µ—à"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–∞–ø—Ç–µ—Ä–Ω—ã–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    try:
        from models import Gender as ModelGender, Activity as ModelActivity, Goal as ModelGoal
        adapted_user: AdapterUserProfile = AdapterUserProfile(
            user_id=user.user_id,
            gender=ModelGender(user.gender.value),
            age=user.age,
            weight=user.weight,
            height=user.height,
            activity=ModelActivity(user.activity.value),
            goal=ModelGoal(user.goal.value),
            daily_calories=user.daily_calories,
            protein=user.protein,
            fat=user.fat,
            carbs=user.carbs,
            meals_count=user.meals_count,
        )
        success = await db_service.save_user(adapted_user.to_dict())
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
        return False
    if success:
        users[user.user_id] = user
    return success

def get_products_management_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    if user_id not in user_products or not user_products[user_id]:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_compose_plan")]
        ])
    
    keyboard = []
    products = user_products[user_id]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    for product_name, weight in products:
        db_product_name = find_similar_product(product_name)
        if db_product_name:
            product = PRODUCTS_DB[db_product_name]
            calories = product.calories * weight / 100
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üóëÔ∏è {product.name} ({weight:.0f}–≥) - {calories:.1f} –∫–∫–∞–ª", 
                    callback_data=f"remove_{product_name}"
                )
            ])
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –ø—Ä–∏–º–µ—Ä–Ω–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å—é
            calories = 100 * weight / 100
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üóëÔ∏è {product_name} ({weight:.0f}–≥) - ~{calories:.1f} –∫–∫–∞–ª", 
                    callback_data=f"remove_{product_name}"
                )
            ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_all_products"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_compose_plan")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
def load_products() -> Dict[str, Product]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('products.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            products = {}
            for item in data:
                products[item['name'].lower()] = Product(
                    name=item['name'],
                    calories=item['calories'],
                    protein=item['protein'],
                    fat=item['fat'],
                    carbs=item['carbs']
                )
            return products
    except FileNotFoundError:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –±–∞–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        try:
            with open('extended_products.json', 'r', encoding='utf-8') as f:
                basic_products = json.load(f)
        except FileNotFoundError:
            # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é
            basic_products = [
                {"name": "–∫—É—Ä–∏—Ü–∞", "calories": 165, "protein": 31, "fat": 3.6, "carbs": 0},
                {"name": "–≥—Ä–µ—á–∫–∞", "calories": 343, "protein": 13, "fat": 3.4, "carbs": 72},
                {"name": "—Ä–∏—Å", "calories": 344, "protein": 7, "fat": 1, "carbs": 78},
                {"name": "—è–π—Ü–∞", "calories": 157, "protein": 13, "fat": 11, "carbs": 1.1},
                {"name": "—Ç–≤–æ—Ä–æ–≥", "calories": 88, "protein": 18, "fat": 0.6, "carbs": 1.8},
                {"name": "–º–æ–ª–æ–∫–æ", "calories": 42, "protein": 3.4, "fat": 1, "carbs": 5},
                {"name": "—Ö–ª–µ–±", "calories": 265, "protein": 9, "fat": 3.2, "carbs": 49},
                {"name": "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å", "calories": 77, "protein": 2, "fat": 0.1, "carbs": 17},
                {"name": "–º–æ—Ä–∫–æ–≤—å", "calories": 41, "protein": 0.9, "fat": 0.2, "carbs": 9.6},
                {"name": "—è–±–ª–æ–∫–æ", "calories": 52, "protein": 0.3, "fat": 0.2, "carbs": 14},
                {"name": "–±–∞–Ω–∞–Ω", "calories": 89, "protein": 1.1, "fat": 0.3, "carbs": 23},
                {"name": "–±–æ—Ä—â", "calories": 85, "protein": 4.5, "fat": 3.8, "carbs": 8.2},
                {"name": "–ø–µ–ª—å–º–µ–Ω–∏", "calories": 275, "protein": 12, "fat": 8, "carbs": 42},
            ]
        
        with open('products.json', 'w', encoding='utf-8') as f:
            json.dump(basic_products, f, ensure_ascii=False, indent=2)
        
        return load_products()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
PRODUCTS_DB = load_products()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£
def calculate_bmr(gender: Gender, weight: float, height: float, age: int) -> float:
    """–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞"""
    if gender == Gender.MALE:
        return 10 * weight + 6.25 * height - 5 * age + 5
    else:
        return 10 * weight + 6.25 * height - 5 * age - 161

def calculate_daily_calories(bmr: float, activity: Activity, goal: Goal) -> int:
    """–†–∞—Å—á–µ—Ç —Å—É—Ç–æ—á–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏"""
    tdee = bmr * activity.value
    
    if goal == Goal.WEIGHT_LOSS:
        return int(tdee * 0.8)  # 1200-1500 –∫–∫–∞–ª –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
    elif goal == Goal.BALANCE:
        return int(tdee * 0.9)  # 1800 –∫–∫–∞–ª –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
    else:  # WEIGHT_GAIN
        return int(tdee * 1.1)  # 2400+ –∫–∫–∞–ª –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã

def calculate_macros(calories: int, goal: Goal) -> Tuple[float, float, float]:
    """–†–∞—Å—á–µ—Ç –ë–ñ–£"""
    if goal == Goal.WEIGHT_LOSS:
        protein = calories * 0.3 / 4  # 30% –±–µ–ª–∫–∏
        fat = calories * 0.25 / 9     # 25% –∂–∏—Ä—ã
        carbs = calories * 0.45 / 4   # 45% —É–≥–ª–µ–≤–æ–¥—ã
    elif goal == Goal.BALANCE:
        protein = calories * 0.25 / 4  # 25% –±–µ–ª–∫–∏
        fat = calories * 0.3 / 9       # 30% –∂–∏—Ä—ã
        carbs = calories * 0.45 / 4    # 45% —É–≥–ª–µ–≤–æ–¥—ã
    else:  # WEIGHT_GAIN
        protein = calories * 0.25 / 4  # 25% –±–µ–ª–∫–∏
        fat = calories * 0.25 / 9      # 25% –∂–∏—Ä—ã
        carbs = calories * 0.5 / 4     # 50% —É–≥–ª–µ–≤–æ–¥—ã
    
    return protein, fat, carbs

def get_meals_count(goal: Goal) -> int:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏"""
    if goal == Goal.WEIGHT_GAIN:
        return 5
    return 4

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
def distribute_products(products: List[Tuple[str, float]], meals_count: int) -> MealPlan:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏ –ø–æ—Ä–æ–≤–Ω—É"""
    if not products:
        return MealPlan([], [], [], [])
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏
    breakfast = []
    snack = []
    lunch = []
    dinner = []
    second_snack = []
    
    for product_name, total_weight in products:
        # –î–µ–ª–∏–º –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏
        weight_per_meal = total_weight / meals_count
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤–æ –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏
        breakfast.append((product_name, weight_per_meal))
        snack.append((product_name, weight_per_meal))
        lunch.append((product_name, weight_per_meal))
        dinner.append((product_name, weight_per_meal))
        
        if meals_count == 5:
            second_snack.append((product_name, weight_per_meal))
    
    return MealPlan(breakfast, snack, lunch, dinner, second_snack if meals_count == 5 else None)

def find_similar_product(product_name: str) -> Optional[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–π –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    product_name_lower = product_name.lower()
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if product_name_lower in PRODUCTS_DB:
        return product_name_lower
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for db_name in PRODUCTS_DB.keys():
        if product_name_lower in db_name or db_name in product_name_lower:
            return db_name
    
    return None

def calculate_total_calories(products: List[Tuple[str, float]]) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    total_calories = 0.0
    for product_name, weight in products:
        # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_product_name = find_similar_product(product_name)
        if db_product_name:
            product = PRODUCTS_DB[db_product_name]
            total_calories += product.calories * weight / 100
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É
            # –°—Ä–µ–¥–Ω—è—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ~100 –∫–∫–∞–ª/100–≥
            total_calories += 100 * weight / 100
    return total_calories

def suggest_meal_plan_days(products: List[Tuple[str, float]], daily_calories: int) -> int:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    total_calories = calculate_total_calories(products)
    if total_calories <= daily_calories:
        return 1
    
    # –í—ã—á–∏—Å–ª—è–µ–º, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –º–æ–∂–Ω–æ —Ä–∞—Å—Ç—è–Ω—É—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
    days = max(1, int(total_calories / daily_calories))
    return min(days, 7)  # –ú–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π

def create_multi_day_plan(
    products: List[Tuple[str, float]],
    daily_calories: int,
    meals_count: int,
    calorie_excess_cap: int = 0,
) -> List[MealPlan]:
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ç–∞–∫, —á—Ç–æ–±—ã –∏–∑–±—ã—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å
    –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª daily_calories + calorie_excess_cap. –ü—Ä–∏ calorie_excess_cap=0 –∏–∑–±—ã—Ç–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
    –≤–µ—Å—å –æ—Å—Ç–∞—Ç–æ–∫ —É—Ö–æ–¥–∏—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å."""

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 1 –≥—Ä–∞–º–º –ø—Ä–æ–¥—É–∫—Ç–∞
    def calories_per_gram(product_name: str) -> float:
        db_product_name = find_similar_product(product_name)
        if db_product_name:
            product = PRODUCTS_DB[db_product_name]
            return product.calories / 100.0
        return 100.0 / 100.0  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 –∫–∫–∞–ª –Ω–∞ 100–≥

    # –ì–æ—Ç–æ–≤–∏–º –∏–∑–º–µ–Ω—è–µ–º—É—é –∫–æ–ø–∏—é —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –≤–µ—Å–∞
    remaining = [
        {
            "name": name,
            "weight": float(weight),
            "kcal_per_g": calories_per_gram(name),
        }
        for name, weight in products
        if weight > 0
    ]

    cap_per_day = float(daily_calories + calorie_excess_cap)
    days: List[List[Tuple[str, float]]] = []  # —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å: [(name, grams), ...]

    # –ü–æ–∫–∞ –æ—Å—Ç–∞–ª–∏—Å—å –≥—Ä–∞–º–º—ã –ª—é–±—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏
    while any(item["weight"] > 1e-9 for item in remaining):
        # –°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å
        total_remaining_kcal = sum(item["weight"] * item["kcal_per_g"] for item in remaining)
        if total_remaining_kcal <= 1e-9:
            break

        target_kcal = min(cap_per_day, total_remaining_kcal)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–ª–µ –∫–∞–ª–æ—Ä–∏–π –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        assigned_grams = {item["name"]: 0.0 for item in remaining}

        for item in remaining:
            if item["weight"] <= 1e-9:
                continue
            share_kcal = target_kcal * ((item["weight"] * item["kcal_per_g"]) / total_remaining_kcal)
            grams = min(item["weight"], share_kcal / max(item["kcal_per_g"], 1e-9))
            if grams > 0:
                assigned_grams[item["name"]] += grams

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å target_kcal –∏–∑-–∑–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π
        day_kcal = sum(
            assigned_grams[name] * next(itm for itm in remaining if itm["name"] == name)["kcal_per_g"]
            for name in assigned_grams
        )

        if day_kcal > target_kcal + 1e-6:
            scale = target_kcal / day_kcal
            for name in assigned_grams:
                assigned_grams[name] *= scale
            day_kcal = target_kcal
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ–±—Ä–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—è –ª–∏–º–∏—Ç
            residual_kcal = max(0.0, target_kcal - day_kcal)
            if residual_kcal > 1e-6:
                for item in remaining:
                    if residual_kcal <= 1e-6:
                        break
                    if item["weight"] <= 1e-9:
                        continue
                    kcal_per_g = max(item["kcal_per_g"], 1e-9)
                    current_assigned = assigned_grams.get(item["name"], 0.0)
                    can_add_grams = max(0.0, item["weight"] - current_assigned)
                    add_grams = min(can_add_grams, residual_kcal / kcal_per_g)
                    if add_grams > 0:
                        assigned_grams[item["name"]] = current_assigned + add_grams
                        residual_kcal -= add_grams * kcal_per_g
                day_kcal = target_kcal - residual_kcal

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–µ–Ω—å
        day_products: List[Tuple[str, float]] = []
        for item in remaining:
            grams = assigned_grams.get(item["name"], 0.0)
            grams = max(0.0, min(grams, item["weight"]))
            if grams > 0:
                day_products.append((item["name"], grams))
                item["weight"] -= grams
                if item["weight"] < 1e-9:
                    item["weight"] = 0.0

        days.append(day_products)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ MealPlan —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    daily_plans: List[MealPlan] = []
    for day_products in days:
        daily_plans.append(distribute_products(day_products, meals_count))

    return daily_plans

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_gender_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
    ])
    return keyboard

def get_activity_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", callback_data="activity_1.2")],
        [InlineKeyboardButton(text="–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_1.375")],
        [InlineKeyboardButton(text="–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_1.55")],
        [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_1.725")],
        [InlineKeyboardButton(text="–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activity_1.9")]
    ])
    return keyboard

def get_goal_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="goal_weight_loss")],
        [InlineKeyboardButton(text="–ë–∞–ª–∞–Ω—Å", callback_data="goal_balance")],
        [InlineKeyboardButton(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_weight_gain")]
    ])
    return keyboard

def get_main_menu_keyboard() -> None:
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–∑-–ø–æ–¥ –ø–∞–Ω–µ–ª–∏ –≤–≤–æ–¥–∞
    return None

def get_main_menu_text() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "üìã –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n"
        "üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å - –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–Ω—è\n\n"
        "üí° –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/settings - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n"
        "/plan - —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
        "/newday - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç!"
    )

def get_main_menu_inline_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="view_profile")],
        [InlineKeyboardButton(text="üìã –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω", callback_data="compose_plan_menu")],
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å", callback_data="new_day_inline")]
    ])
    return keyboard

def get_profile_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

def get_plan_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω", callback_data="get_plan")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

def get_compose_plan_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ (–≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è)"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóÇ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="select_products")],
        [InlineKeyboardButton(text="üìã –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω", callback_data="get_plan")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

def get_plan_context_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ (–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤)"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóÇ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="select_products")],
        [InlineKeyboardButton(text="üìã –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω", callback_data="get_plan")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    return keyboard

def get_meal_plan_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóÇ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="select_products")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å", callback_data="new_day_inline")],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    return keyboard

def get_category_inline_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    keyboard = []
    categories = get_category_keyboard()
    
    for row in categories:
        keyboard_row = []
        for category in row:
            keyboard_row.append(InlineKeyboardButton(text=category, callback_data=f"category_{category}"))
        keyboard.append(keyboard_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_compose_plan")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_products_inline_keyboard(category: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = []
    products = get_products_in_category(category)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ä—è–¥
    for i in range(0, len(products), 2):
        row = []
        product_name, calories = products[i]
        row.append(InlineKeyboardButton(
            text=f"{product_name} ({calories})", 
            callback_data=f"product_{product_name}"
        ))
        
        if i + 1 < len(products):
            product_name2, calories2 = products[i + 1]
            row.append(InlineKeyboardButton(
                text=f"{product_name2} ({calories2})", 
                callback_data=f"product_{product_name2}"
            ))
        
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"),
        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await load_user_from_db(user_id)
    
    if user:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await load_user_products_from_db(user_id)
        
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n" + get_main_menu_text(),
            reply_markup=get_main_menu_inline_keyboard()
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ '–£–º–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω'!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=get_gender_keyboard()
        )
        await state.set_state(UserStates.waiting_for_gender)



@dp.message(Command("plan"))
async def cmd_plan(message: types.Message):
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await load_user_from_db(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    products = await load_user_products_from_db(user_id)
    if not products:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –≤—ã–±—Ä–∞–≤ –∏—Ö –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return
    
    await generate_meal_plan(message, user_id)

@dp.message(Command("settings"))
async def cmd_settings(message: types.Message):
    if not message.from_user:
        return
    user_id = message.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await load_user_from_db(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    activity_names = {
        Activity.SEDENTARY: "–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        Activity.LIGHT: "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
        Activity.MODERATE: "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        Activity.ACTIVE: "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        Activity.VERY_ACTIVE: "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    goal_names = {
        Goal.WEIGHT_LOSS: "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
        Goal.BALANCE: "–ë–∞–ª–∞–Ω—Å",
        Goal.WEIGHT_GAIN: "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"
    }
    
    await message.answer(
        f"ÔøΩÔøΩ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user.gender == Gender.MALE else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.age} –ª–µ—Ç\n"
        f"–í–µ—Å: {user.weight} –∫–≥\n"
        f"–†–æ—Å—Ç: {user.height} —Å–º\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_names[user.activity]}\n"
        f"–¶–µ–ª—å: {goal_names[user.goal]}\n\n"
        f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞:\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {user.daily_calories} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {user.protein:.1f} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {user.fat:.1f} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {user.carbs:.1f} –≥\n"
        f"‚Ä¢ –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {user.meals_count}"
    )

@dp.message(Command("newday"))
async def cmd_newday(message: types.Message):
    await new_day(message)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(get_main_menu_text())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@dp.callback_query(lambda c: c.data.startswith('gender_'))
async def process_gender_selection(callback: types.CallbackQuery, state: FSMContext):
    if not callback.data:
        return
    gender_str = callback.data.split('_')[1]
    gender = Gender.MALE if gender_str == 'male' else Gender.FEMALE
    
    await state.update_data(gender=gender)
    if callback.message and isinstance(callback.message, Message):
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):")
    await state.set_state(UserStates.waiting_for_age)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('activity_'))
async def process_activity_selection(callback: types.CallbackQuery, state: FSMContext):
    if not callback.data:
        return
    activity_value = float(callback.data.split('_')[1])
    activity = Activity(activity_value)
    
    await state.update_data(activity=activity)
    if callback.message and isinstance(callback.message, Message):
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=get_goal_keyboard())
    await state.set_state(UserStates.waiting_for_goal)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('goal_'))
async def process_goal_selection(callback: types.CallbackQuery, state: FSMContext):
    if not callback.data:
        return
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'goal_' –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
    goal_str = callback.data.replace('goal_', '')
    
    if goal_str == 'weight_loss':
        goal = Goal.WEIGHT_LOSS
    elif goal_str == 'balance':
        goal = Goal.BALANCE
    elif goal_str == 'weight_gain':
        goal = Goal.WEIGHT_GAIN
    else:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å: {goal_str}")
        goal = Goal.WEIGHT_LOSS  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Ö—É–¥–µ–Ω–∏–µ
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    user = UserProfile(
        user_id=user_id,
        gender=data['gender'],
        age=data['age'],
        weight=data['weight'],
        height=data['height'],
        activity=data['activity'],
        goal=goal
    )
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
    bmr = calculate_bmr(user.gender, user.weight, user.height, user.age)
    user.daily_calories = calculate_daily_calories(bmr, user.activity, user.goal)
    user.protein, user.fat, user.carbs = calculate_macros(user.daily_calories, user.goal)
    user.meals_count = get_meals_count(user.goal)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_user_to_db(user)
    user_products[user_id] = []
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    goal_names = {
        Goal.WEIGHT_LOSS: "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
        Goal.BALANCE: "–ë–∞–ª–∞–Ω—Å", 
        Goal.WEIGHT_GAIN: "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"
    }
    
    if callback.message and isinstance(callback.message, Message):
        await callback.message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–í–∞—à–∞ —Ü–µ–ª—å: {goal_names[user.goal]}\n"
            f"–ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å: {user.meals_count}\n\n"
            f"–í–∞—à–∏ —Å—É—Ç–æ—á–Ω—ã–µ –Ω–æ—Ä–º—ã:\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {user.daily_calories} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {user.protein:.1f} –≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {user.fat:.1f} –≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {user.carbs:.1f} –≥\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_inline_keyboard()
        )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(UserStates.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text:
        return
    try:
        age = int(message.text)
        if age < 10 or age > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç):")
            return
        
        await state.update_data(age=age)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
        await state.set_state(UserStates.waiting_for_weight)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message(UserStates.waiting_for_weight)
async def process_weight(message: types.Message, state: FSMContext):
    if not message.text:
        return
    try:
        weight = float(message.text)
        if weight < 30 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥):")
            return
        
        await state.update_data(weight=weight)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(UserStates.waiting_for_height)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message(UserStates.waiting_for_height)
async def process_height(message: types.Message, state: FSMContext):
    if not message.text:
        return
    try:
        height = float(message.text)
        if height < 100 or height > 250:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):")
            return
        
        await state.update_data(height=height)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=get_activity_keyboard())
        await state.set_state(UserStates.waiting_for_activity)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@dp.callback_query(lambda c: c.data.startswith('category_'))
async def process_category_selection(callback: types.CallbackQuery):
    if not callback.data or not callback.message or not isinstance(callback.message, Message):
        return
    category = callback.data.replace('category_', '')
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':",
        reply_markup=get_products_inline_keyboard(category)
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤:",
        reply_markup=get_category_inline_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    await callback.message.edit_text(
        "üëã " + get_main_menu_text(),
        reply_markup=get_main_menu_inline_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_compose_plan")
async def back_to_compose_plan(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    await callback.message.edit_text(
        "üìã –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_compose_plan_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@dp.callback_query(lambda c: c.data.startswith('product_'))
async def process_product_selection(callback: types.CallbackQuery, state: FSMContext):
    if not callback.data or not callback.message or not isinstance(callback.message, Message):
        return
    product_name = callback.data.split('_', 1)[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ
    if product_name.lower() in PRODUCTS_DB:
        await state.update_data(product_name=product_name)
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö:")
        await state.set_state(UserStates.waiting_for_product_weight)
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await callback.message.answer(
            f"–ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "bulk_add_products")
async def bulk_add_products_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ö–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    if not callback.message or not isinstance(callback.message, Message):
        return
    await callback.message.edit_text(
        "üìã –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_compose_plan_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
@dp.callback_query(lambda c: c.data == "clear_products")
async def clear_products_callback(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    user_id = callback.from_user.id
    await clear_user_products(user_id)
    
    await callback.message.edit_text(
        "üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∞—Ç! –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.\n\n" + get_main_menu_text(),
        reply_markup=get_main_menu_inline_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "get_plan_first")
async def get_plan_first_callback(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    user_id = callback.from_user.id
    await callback.message.delete()
    await generate_meal_plan(callback.message, user_id)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_new_day")
async def cancel_new_day_callback(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "new_day_inline")
async def new_day_inline_callback(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    user_id = callback.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await load_user_from_db(user_id)
    if not user:
        await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start")
        await callback.answer()
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    products = await load_user_products_from_db(user_id)
    current_products_count = len(products)
    
    if current_products_count > 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—á–∏—Å—Ç–∏—Ç—å
        summary = get_user_products_summary(user_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å", callback_data="clear_products")],
            [InlineKeyboardButton(text="üìã –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω", callback_data="get_plan_first")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_new_day")]
        ])
        
        await callback.message.edit_text(
            f"üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å?\n\n{summary}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
        await clear_user_products(user_id)
        await callback.message.edit_text(
            "üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∞—Ç! –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.\n\n" + get_main_menu_text(),
            reply_markup=get_main_menu_inline_keyboard()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "view_profile")
async def view_profile_callback(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    user_id = callback.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await load_user_from_db(user_id)
    if not user:
        await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start")
        await callback.answer()
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    activity_names = {
        Activity.SEDENTARY: "–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        Activity.LIGHT: "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
        Activity.MODERATE: "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        Activity.ACTIVE: "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        Activity.VERY_ACTIVE: "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    goal_names = {
        Goal.WEIGHT_LOSS: "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
        Goal.BALANCE: "–ë–∞–ª–∞–Ω—Å",
        Goal.WEIGHT_GAIN: "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"
    }
    
    profile_text = (
        f"üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user.gender == Gender.MALE else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.age} –ª–µ—Ç\n"
        f"–í–µ—Å: {user.weight} –∫–≥\n"
        f"–†–æ—Å—Ç: {user.height} —Å–º\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_names[user.activity]}\n"
        f"–¶–µ–ª—å: {goal_names[user.goal]}\n\n"
        f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞:\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {user.daily_calories} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {user.protein:.1f} –≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {user.fat:.1f} –≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {user.carbs:.1f} –≥\n"
        f"‚Ä¢ –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {user.meals_count}"
    )
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=get_profile_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "edit_profile")
async def edit_profile_callback(callback: types.CallbackQuery, state: FSMContext):
    if not callback.message or not isinstance(callback.message, Message):
        return
    await callback.message.edit_text(
        "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(UserStates.waiting_for_gender)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "compose_plan_menu")
async def compose_plan_menu_callback(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    await callback.message.edit_text(
        "üìã –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_compose_plan_menu_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "select_products")
async def select_products_callback(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    await callback.message.edit_text(
        "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤:",
        reply_markup=get_category_inline_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "get_plan")
async def get_plan_callback(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    user_id = callback.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await load_user_from_db(user_id)
    if not user:
        await callback.message.edit_text(
            "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=get_main_menu_inline_keyboard()
        )
        await callback.answer()
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    products = await load_user_products_from_db(user_id)
    if not products:
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –≤—ã–±—Ä–∞–≤ –∏—Ö –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
            reply_markup=get_plan_menu_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.delete()
    await generate_meal_plan(callback.message, user_id)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "view_cart")
async def view_cart_callback(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    user_id = callback.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    products = await load_user_products_from_db(user_id)
    if not products:
        await callback.message.edit_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n\n"
            "üìã –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:",
            reply_markup=get_plan_context_keyboard()
        )
        await callback.answer()
        return
    
    summary = get_user_products_summary(user_id)
    keyboard = get_products_management_keyboard(user_id)
    
    await callback.message.edit_text(
        f"{summary}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç–µ –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É:",
        reply_markup=keyboard
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
@dp.callback_query(lambda c: c.data.startswith('remove_'))
async def remove_product_callback(callback: types.CallbackQuery):
    if not callback.data or not callback.message or not isinstance(callback.message, Message):
        return
    user_id = callback.from_user.id
    product_name = callback.data.replace('remove_', '')
    
    if await remove_product_from_user(user_id, product_name):
        if product_name.lower() in PRODUCTS_DB:
            product = PRODUCTS_DB[product_name.lower()]
            await callback.answer(f"‚úÖ {product.name} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        else:
            await callback.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_id in user_products and user_products[user_id]:
            summary = get_user_products_summary(user_id)
            keyboard = get_products_management_keyboard(user_id)
            
            await callback.message.edit_text(
                f"{summary}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç–µ –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É:",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n\n"
                "ÔøΩÔøΩ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:",
                reply_markup=get_plan_context_keyboard()
            )
    else:
        await callback.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.callback_query(lambda c: c.data == "clear_all_products")
async def clear_all_products_callback(callback: types.CallbackQuery):
    if not callback.message or not isinstance(callback.message, Message):
        return
    user_id = callback.from_user.id
    await clear_user_products(user_id)
    
    await callback.message.edit_text(
        "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!\n\n"
        "üìã –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:",
        reply_markup=get_plan_context_keyboard()
    )
    await callback.answer()

@dp.message(UserStates.waiting_for_product_weight)
async def process_product_weight(message: types.Message, state: FSMContext):
    if not message.text or not message.from_user:
        return
    try:
        weight = float(message.text)
        if weight <= 0 or weight > 10000:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (1-10000 –≥):")
            return
        
        data = await state.get_data()
        product_name = data['product_name']
        user_id = message.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        await add_product_to_user(user_id, product_name, weight)
        
        product = PRODUCTS_DB[product_name.lower()]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø—Ä–æ–¥—É–∫—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π
        total_weight = 0.0
        for name, existing_weight in user_products[user_id]:
            if name.lower() == product_name.lower():
                total_weight = existing_weight
                break
        
        if total_weight == weight:
            # –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
            message_text = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.name} - {weight} –≥\n"
        else:
            # –ü—Ä–æ–¥—É–∫—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω
            message_text = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.name} - {weight} –≥\n"
            message_text += f"üìä –û–±—â–∏–π –≤–µ—Å {product.name}: {total_weight} –≥\n"
        
        message_text += f"–ö–∞–ª–æ—Ä–∏–∏: {product.calories * weight / 100:.1f} –∫–∫–∞–ª\n\n"
        message_text += f"–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(user_products[user_id])}\n\n"
        message_text += f"üìã –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:"
        
        await message.answer(
            message_text,
            reply_markup=get_plan_context_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text == "üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def show_profile(message: types.Message):
    if not message.from_user:
        return
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    await message.answer(
        "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_profile_menu_keyboard()
    )



@dp.message(F.text == "üìã –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω")
async def compose_plan(message: types.Message):
    if not message.from_user:
        return
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    await message.answer(
        "üìã –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_compose_plan_menu_keyboard()
    )





@dp.message(F.text == "üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å")
async def new_day(message: types.Message):
    if not message.from_user:
        return
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    current_products_count = len(user_products.get(user_id, []))
    
    if current_products_count > 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—á–∏—Å—Ç–∏—Ç—å
        summary = get_user_products_summary(user_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å", callback_data="clear_products")],
            [InlineKeyboardButton(text="üìã –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω", callback_data="get_plan_first")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_new_day")]
        ])
        
        await message.answer(
            f"üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å?\n\n{summary}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
        await clear_user_products(user_id)
        await message.answer(
            "üîÑ –ù–æ–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∞—Ç! –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.\n\n" + get_main_menu_text(),
            reply_markup=get_main_menu_inline_keyboard()
        )

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
async def generate_meal_plan(message: types.Message, user_id: int):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in users:
        await message.answer(
            "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=get_main_menu_inline_keyboard()
        )
        return
    
    user = users[user_id]
    products = user_products.get(user_id, [])
    print(f"[DEBUG] user_id: {user_id}")
    print(f"[DEBUG] user: {user}")
    print(f"[DEBUG] products: {products}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏
    total_calories = calculate_total_calories(products)
    print(f"[DEBUG] total_calories: {total_calories}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–µ–π –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    goal_names = {
        Goal.WEIGHT_LOSS: "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
        Goal.BALANCE: "–ë–∞–ª–∞–Ω—Å",
        Goal.WEIGHT_GAIN: "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    multi_day_plan_created = False
    if total_calories > user.daily_calories * 1.5:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±–µ–∑ –∏–∑–±—ã—Ç–∫–∞ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –¥–µ–Ω—å
        daily_plans = create_multi_day_plan(
            products=products,
            daily_calories=user.daily_calories,
            meals_count=user.meals_count,
            calorie_excess_cap=0,
        )
        suggested_days = len(daily_plans)
        print(f"[DEBUG] suggested_days: {suggested_days}")

        if suggested_days > 1:
            plan_text = f"‚ö†Ô∏è –£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤!\n\n"
            plan_text += f"–û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {total_calories:.1f} –∫–∫–∞–ª\n"
            plan_text += f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {user.daily_calories} –∫–∫–∞–ª\n\n"
            plan_text += f"–†–∞—Å–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ {suggested_days} –¥–Ω. –±–µ–∑ –∏–∑–±—ã—Ç–∫–∞ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å.\n\n"

            multi_day_plan_created = True

            for day in range(suggested_days):
                plan_text += f"üìÖ –î–µ–Ω—å {day + 1}:\n"
                plan_text += f"–¶–µ–ª—å: {goal_names[user.goal]}\n"
                plan_text += f"–ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {user.meals_count}\n\n"
                
                daily_plan = daily_plans[day]
                print(f"[DEBUG] daily_plan[{day}]: {daily_plan}")
                
                # –ó–∞–≤—Ç—Ä–∞–∫
                plan_text += "üåÖ –ó–∞–≤—Ç—Ä–∞–∫:\n"
                if daily_plan.breakfast:
                    for product_name, weight in daily_plan.breakfast:
                        db_product_name = find_similar_product(product_name)
                        if db_product_name:
                            product = PRODUCTS_DB[db_product_name]
                            calories = product.calories * weight / 100
                            plan_text += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
                        else:
                            calories = 100 * weight / 100
                            plan_text += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
                else:
                    plan_text += "‚Ä¢ –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                
                # –ü–µ—Ä–µ–∫—É—Å
                plan_text += "\nüçé –ü–µ—Ä–µ–∫—É—Å:\n"
                if daily_plan.snack:
                    for product_name, weight in daily_plan.snack:
                        db_product_name = find_similar_product(product_name)
                        if db_product_name:
                            product = PRODUCTS_DB[db_product_name]
                            calories = product.calories * weight / 100
                            plan_text += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
                        else:
                            calories = 100 * weight / 100
                            plan_text += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
                else:
                    plan_text += "‚Ä¢ –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                
                # –û–±–µ–¥
                plan_text += "\nüçΩ –û–±–µ–¥:\n"
                if daily_plan.lunch:
                    for product_name, weight in daily_plan.lunch:
                        db_product_name = find_similar_product(product_name)
                        if db_product_name:
                            product = PRODUCTS_DB[db_product_name]
                            calories = product.calories * weight / 100
                            plan_text += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
                        else:
                            calories = 100 * weight / 100
                            plan_text += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
                else:
                    plan_text += "‚Ä¢ –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                
                # –£–∂–∏–Ω
                plan_text += "\nüåô –£–∂–∏–Ω:\n"
                if daily_plan.dinner:
                    for product_name, weight in daily_plan.dinner:
                        db_product_name = find_similar_product(product_name)
                        if db_product_name:
                            product = PRODUCTS_DB[db_product_name]
                            calories = product.calories * weight / 100
                            plan_text += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
                        else:
                            calories = 100 * weight / 100
                            plan_text += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
                else:
                    plan_text += "‚Ä¢ –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                
                # –í—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–∫—É—Å (–µ—Å–ª–∏ 5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏)
                if daily_plan.second_snack:
                    plan_text += "\nüçé –í—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–∫—É—Å:\n"
                    for product_name, weight in daily_plan.second_snack:
                        db_product_name = find_similar_product(product_name)
                        if db_product_name:
                            product = PRODUCTS_DB[db_product_name]
                            calories = product.calories * weight / 100
                            plan_text += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
                        else:
                            calories = 100 * weight / 100
                            plan_text += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
                
                # –ö–∞–ª–æ—Ä–∏–∏ –∑–∞ –¥–µ–Ω—å
                daily_calories = int(sum(
                    (PRODUCTS_DB[db_name].calories if (db_name := find_similar_product(product_name)) else 100) * weight / 100
                    for product_name, weight in daily_plan.breakfast + daily_plan.snack + daily_plan.lunch + daily_plan.dinner + (daily_plan.second_snack or [])
                ))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–±—ã—Ç–æ–∫/–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                if daily_calories < user.daily_calories - 100:
                    plan_text += f"\nüìä –ö–∞–ª–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å: {daily_calories:.1f} / {user.daily_calories} (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)\n"
                elif daily_calories > user.daily_calories + 200:
                    excess = daily_calories - user.daily_calories
                    plan_text += f"\nüìä –ö–∞–ª–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å: {daily_calories:.1f} / {user.daily_calories} (–∏–∑–±—ã—Ç–æ–∫: {excess:.1f} –∫–∫–∞–ª)\n"
                else:
                    plan_text += f"\nüìä –ö–∞–ª–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å: {daily_calories:.1f} / {user.daily_calories}\n"
                
                if day < suggested_days - 1:
                    plan_text += "\n" + "‚îÄ" * 32 + "\n\n"
            
            # –ü–æ—è—Å–Ω–µ–Ω–∏–µ
            plan_text += "\nüí° –ü—Ä–æ–¥—É–∫—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ç–∞–∫, —á—Ç–æ –∏–∑–±—ã—Ç–∫–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ –¥–Ω—è–º –Ω–µ—Ç; –≤–µ—Å—å –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å."
            
        else:
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            plan_text = f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤!\n\n"
            plan_text += f"–û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {total_calories:.1f} –∫–∫–∞–ª\n"
            plan_text += f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {user.daily_calories} –∫–∫–∞–ª\n\n"
            plan_text += "–†–µ–∫–æ–º–µ–Ω–¥—É—é —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
        
        await message.answer(plan_text, reply_markup=get_meal_plan_keyboard())
        return
    
    # –û–±—ã—á–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
    meal_plan = distribute_products(products, user.meals_count)
    print(f"[DEBUG] meal_plan: {meal_plan}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    plan_text = f"üçΩ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å\n\n"
    plan_text += f"–¶–µ–ª—å: {goal_names[user.goal]}\n"
    plan_text += f"–í–∞—à–∞ –Ω–æ—Ä–º–∞: {user.daily_calories} –∫–∫–∞–ª\n"
    plan_text += f"–ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {user.meals_count}\n\n"
    
    # –ó–∞–≤—Ç—Ä–∞–∫
    print(f"[DEBUG] meal_plan.breakfast: {meal_plan.breakfast}")
    plan_text += "üåÖ –ó–∞–≤—Ç—Ä–∞–∫:\n"
    if meal_plan.breakfast:
        for product_name, weight in meal_plan.breakfast:
            db_product_name = find_similar_product(product_name)
            if db_product_name:
                product = PRODUCTS_DB[db_product_name]
                calories = product.calories * weight / 100
                plan_text += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
            else:
                calories = 100 * weight / 100
                plan_text += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
    else:
        plan_text += "‚Ä¢ –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
    
    # –ü–µ—Ä–µ–∫—É—Å
    print(f"[DEBUG] meal_plan.snack: {meal_plan.snack}")
    plan_text += "\nüçé –ü–µ—Ä–µ–∫—É—Å:\n"
    if meal_plan.snack:
        for product_name, weight in meal_plan.snack:
            db_product_name = find_similar_product(product_name)
            if db_product_name:
                product = PRODUCTS_DB[db_product_name]
                calories = product.calories * weight / 100
                plan_text += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
            else:
                calories = 100 * weight / 100
                plan_text += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
    else:
        plan_text += "‚Ä¢ –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
    
    # –û–±–µ–¥
    print(f"[DEBUG] meal_plan.lunch: {meal_plan.lunch}")
    plan_text += "\nüçΩ –û–±–µ–¥:\n"
    if meal_plan.lunch:
        for product_name, weight in meal_plan.lunch:
            db_product_name = find_similar_product(product_name)
            if db_product_name:
                product = PRODUCTS_DB[db_product_name]
                calories = product.calories * weight / 100
                plan_text += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
            else:
                calories = 100 * weight / 100
                plan_text += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
    else:
        plan_text += "‚Ä¢ –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
    
    # –£–∂–∏–Ω
    print(f"[DEBUG] meal_plan.dinner: {meal_plan.dinner}")
    plan_text += "\nüåô –£–∂–∏–Ω:\n"
    if meal_plan.dinner:
        for product_name, weight in meal_plan.dinner:
            db_product_name = find_similar_product(product_name)
            if db_product_name:
                product = PRODUCTS_DB[db_product_name]
                calories = product.calories * weight / 100
                plan_text += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
            else:
                calories = 100 * weight / 100
                plan_text += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
    else:
        plan_text += "‚Ä¢ –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
    
    # –í—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–∫—É—Å (–µ—Å–ª–∏ 5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏)
    if meal_plan.second_snack:
        plan_text += "\nüçé –í—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–∫—É—Å:\n"
        for product_name, weight in meal_plan.second_snack:
            db_product_name = find_similar_product(product_name)
            if db_product_name:
                product = PRODUCTS_DB[db_product_name]
                calories = product.calories * weight / 100
                plan_text += f"‚Ä¢ {product.name} - {weight:.0f}–≥ ({calories:.1f} –∫–∫–∞–ª)\n"
            else:
                calories = 100 * weight / 100
                plan_text += f"‚Ä¢ {product_name} - {weight:.0f}–≥ (~{calories:.1f} –∫–∫–∞–ª)\n"
    
    plan_text += f"\nüìä –ò—Ç–æ–≥–æ –∫–∞–ª–æ—Ä–∏–π: {total_calories:.1f} / {user.daily_calories}"
    
    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω
    if not multi_day_plan_created:
        if total_calories < user.daily_calories - 100:
            plan_text += "\n‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ª–æ—Ä–∏–π! –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è."
        elif total_calories > user.daily_calories + 200:
            plan_text += "\n‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞–ª–æ—Ä–∏–π! –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
    
    await message.answer(plan_text, reply_markup=get_meal_plan_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db_service.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await db_service.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 
